{
  "rules": [
    {
      "type": "prd",
      "content": "# Product Requirement Document (PRD)\n\n## 1. Overview\nBeMore is a responsive web service that captures a user’s face, voice, and text in a single weekly reflection session, converts those multimodal signals into a VAD-based emotion vector, then delivers CBT-driven feedback and clear visual trends to help Gen-Z college students and young professionals gain deeper self-awareness and reduce stress.\n\n## 2. Objectives & Success Metrics\n1. Help users understand their emotions beyond text-only analysis.\n   • KPI 1: ≥ 75 % of weekly active users view the emotion report within 1 hour after recording.\n2. Encourage continuous reflection to reveal long-term patterns.\n   • KPI 2: 4-week retention ≥ 30 %.\n3. Provide actionable CBT suggestions that users value.\n   • KPI 3: Average feedback usefulness rating ≥ 4 / 5.\n\n## 3. Target Users (Personas)\n1. \"Stressed Student\" – 21-year-old university junior juggling exams and part-time work; records via phone in dorm room.\n2. \"Rising Pro\" – 28-year-old UX designer working remote; reflects Sunday evening via laptop webcam.\nBoth value privacy, quick insights, and dislike clinical language.\n\n## 4. Core Pain Points\n• Text-only mood trackers feel shallow.\n• Hard to see emotion trends over time.\n• Therapy feels expensive or intimidating.\n\n## 5. Main User Goals\nA. Gain deep self-awareness of emotional patterns.\nB. Reduce stress & anxiety through actionable CBT tips.\n\n## 6. Main Use Case (MVP)\nWeekly in-depth reflection session (2-3 min recording) → instant multimodal analysis → CBT feedback & downloadable PDF report → dashboard of emotion trends.\n\n## 7. Key Features (MVP Scope)\n1. Multimodal Emotion Detection (face, voice, text)\n2. Emotion Trend Dashboard (charts of V, A, D over time)\n3. CBT-Based Reflection Report (PDF + in-app)\n4. Habit-Tracking Streaks & Gentle Nudges (email / push)\n5. AI Chat Coach (follow-up Q&A on results)\n6. Anonymous Community Sharing (optional)\n\n## 8. Out-of-Scope (MVP)\n• Continuous background monitoring\n• Third-party wearable integration\n• Enterprise admin portals\n\n## 9. Functional Requirements\nFR-1  User can create account with email/social login.\nFR-2  User completes onboarding explaining privacy & how to record.\nFR-3  User records video/audio & enters optional text journal.\nFR-4  System runs AI pipeline → returns VAD scores & emotion labels.\nFR-5  System stores results securely and updates dashboards.\nFR-6  App generates CBT tips matched to dominant emotion.\nFR-7  User can download PDF report or share anonymously.\nFR-8  Habit engine sends reminders & tracks streaks.\nFR-9  User can chat with AI coach about their report.\n\n## 10. Non-Functional Requirements\n• Works on mobile, tablet, desktop (responsive).\n• Average analysis turnaround ≤ 15 sec.\n• GDPR-level data privacy; all media encrypted at rest.\n• Accessibility: WCAG 2.1 AA.\n\n## 11. Assumptions\n• Users are willing to grant camera & mic permission once a week.\n• Off-the-shelf APIs (Whisper, MediaPipe, emotion model) provide sufficient accuracy.\n\n## 12. Risks & Mitigations\n| Risk | Impact | Mitigation |\n|------|--------|-----------|\n| Low model accuracy | Users lose trust | Iterative model tuning; show confidence score |\n| Privacy concerns | Drop-off at onboarding | Clear consent UX, local processing where possible |\n| Long processing time | Abandon recording | Use lightweight models + queue system |\n\n## 13. Development Strategy\nMVP → monthly iterations; agile sprints (2 wks) using default SuperNext tech stack (Next.js 15, Hono.js API, Supabase, TypeScript, Tailwind, shadcn, lucide-react, TanStack Query).\n\n## 14. Milestones & Timeline (tentative)\nM0  Week 0    Project kickoff\nM1  Week 4    Recording & emotion detection POC\nM2  Week 8    CBT report & dashboard\nM3  Week 10   Habit nudges & AI chat\nM4  Week 12   Public beta launch\n\n---\nOwner: Captain (Product Lead)\nDate: 2025-10-01",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n  \n## Tech Stack\n\nNext.js 15, Hono.js, Supabase (PostgreSQL, Auth, Storage, Edge Functions), TypeScript, TailwindCSS, shadcn, lucide-react, @tanstack/react-query, Vercel, Resend/Postmark, OpenAI Whisper, MediaPipe, custom VAD emotion model, GPT-4o for chat\n\n## Directory Structure\n\n\n/\n├── src/\n│   ├── app/                        # Next.js app router\n│   │   ├── (protected)/            # protected routes group\n│   │   │   └── dashboard/          # dashboard pages\n│   │   ├── api/                    # API routes (Hono integration)\n│   │   ├── login/                  # auth pages\n│   │   ├── signup/                 # auth pages\n│   │   └── example/                # example pages\n│   ├── backend/                    # server-side logic\n│   │   ├── config/                 # backend configuration\n│   │   ├── hono/                   # Hono app setup\n│   │   ├── http/                   # HTTP utilities\n│   │   ├── middleware/             # server middleware\n│   │   └── supabase/               # supabase server client\n│   ├── components/                 # common components\n│   │   └── ui/                     # shadcn/ui components\n│   ├── features/                   # feature-based modules\n│   │   ├── auth/                   # authentication feature\n│   │   │   ├── context/            # auth contexts\n│   │   │   ├── hooks/              # auth hooks\n│   │   │   ├── server/             # auth server logic\n│   │   │   └── types.ts            # auth types\n│   │   └── [featureName]/          \n│   │       ├── backend/            # backend logic\n│   │       ├── components/         # feature components\n│   │       ├── pages/              # feature pages\n│   │       ├── constants.ts        # feature constants\n│   │       ├── types.ts            # feature types\n│   │       └── utils.ts            # feature utils\n│   │       ├── hooks/              # feature hooks\n│   │       └── lib/                # feature utilities\n│   ├── constants/                  # global constants\n│   ├── hooks/                      # common hooks\n│   └── lib/                        # utilities\n│       ├── remote/                 # API client\n│       ├── supabase/               # supabase client setup\n│       └── utils.ts                # shadcn cn utility\n├── public/                         # static assets\n└── supabase/migrations/            # supabase migrations\n\n  ",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "design-guide",
      "content": "# BeMore Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\nBeMore embodies a **trustworthy and professional** design mood that prioritizes user comfort and emotional safety. The overall concept centers on creating a calming, non-clinical environment where Gen-Z users feel safe to explore their emotions without judgment. The design language emphasizes clarity, accessibility, and gentle guidance through sophisticated yet approachable visual elements.\n\nThe service aims to feel like a trusted friend rather than a clinical tool - warm enough to encourage vulnerability, yet professional enough to instill confidence in the AI-driven insights. Every design decision supports the core mission of making emotional self-awareness accessible and actionable for stressed students and young professionals.\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Apple Health\n- **Description**: Comprehensive health and wellness tracking platform that presents complex data in digestible, actionable formats\n- **Design Mood**: Clean, trustworthy, data-focused with gentle encouragement\n- **Primary Color**: #007AFF (System Blue)\n- **Secondary Color**: #F2F2F7 (Light Gray)\n\nApple Health's approach to presenting sensitive personal data with clarity and trust aligns perfectly with BeMore's need to display emotional insights. The clean interface, thoughtful use of charts, and non-intimidating presentation of health metrics serve as inspiration for our emotion tracking dashboard.\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n- **Primary Color**: #25324A (Misty Navy)\n- **Secondary Color**: #F5F7FA (Light Slate)\n- **Mood**: Cool, Low Saturation - promoting calmness and trust\n\n**Extended Color Palette:**\n- **Accent Primary**: #3D8A9E (Dusty Teal) - Charts, primary buttons\n- **Accent Secondary**: #A9B0C7 (Muted Lavender) - Secondary CTA, borders\n- **Highlight/CTA**: #2F80ED (Sky Blue) - Primary actions, links\n- **Success**: #2DBE76 (Emerald)\n- **Warning**: #E8A531 (Amber)\n- **Error**: #E1574C (Coral)\n\n**Color Usage by UI Element Importance:**\n1. **Critical Actions**: Sky Blue (#2F80ED) - Start recording, view results\n2. **Primary Content**: Misty Navy (#25324A) - Headers, important text\n3. **Data Visualization**: Dusty Teal (#3D8A9E) - Charts, progress indicators\n4. **Secondary Actions**: Muted Lavender (#A9B0C7) - Optional features, borders\n5. **Background**: Light Slate (#F5F7FA) - Page backgrounds, card surfaces\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n**Primary Font Family**: Inter (fallback: SF Pro Display/Text)\n\n**Typography Scale:**\n- **Heading 1**: Inter, 32px, Semi-bold (600), -0.2px letter-spacing\n- **Heading 2**: Inter, 24px, Semi-bold (600), -0.1px letter-spacing\n- **Heading 3**: Inter, 20px, Medium (500), normal letter-spacing\n- **Body Large**: Inter, 18px, Regular (400), 1.5 line-height\n- **Body**: Inter, 16px, Regular (400), 1.5 line-height\n- **Body Small**: Inter, 14px, Regular (400), 1.4 line-height\n- **Caption**: Inter, 12px, Medium (500), 1.3 line-height\n\n**Special Typography:**\n- **Chart Numbers**: Inter with tabular-nums for proper alignment\n- **Emotional Labels**: Inter Medium for emphasis without being harsh\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n**Grid System:**\n- **Base Unit**: 4px baseline grid\n- **Spacing Tokens**: 4px, 8px, 16px, 24px, 32px, 48px, 64px\n- **Container Max-Width**: 1200px on desktop\n- **Mobile Breakpoints**: 375px (mobile), 768px (tablet), 1024px (desktop)\n\n**Layout Principles:**\n- **Mobile-First**: Bottom navigation with 5 core sections\n- **Desktop**: Top navigation + left sidebar for Dashboard sub-sections\n- **Content Hierarchy**: Clear visual hierarchy with generous whitespace\n- **Card-Based**: Modular content blocks with consistent spacing\n- **Responsive**: Fluid layouts that adapt gracefully across devices\n\n**Page Structure:**\n- Header: 64px height with service logo and user avatar\n- Main Content: Flexible with 24px padding on mobile, 32px on desktop\n- Bottom Navigation: 72px height on mobile only\n\n## 6. Visual Style (비주얼 스타일)\n\n**Iconography:**\n- **Library**: Lucide React line icons\n- **Style**: 1.5px stroke weight, rounded line caps\n- **Sizes**: 16px (small), 20px (medium), 24px (large), 32px (XL)\n- **Color**: Inherit from parent or use Misty Navy for standalone\n\n**Illustrations:**\n- **Style**: Minimal outline illustrations for onboarding\n- **Color**: Single-color using Dusty Teal with Light Slate backgrounds\n- **Usage**: Emotional states, feature explanations, empty states\n- **Avoid**: Stock photos of people to maintain privacy focus\n\n**Cards & Containers:**\n- **Border Radius**: 12px for cards, 8px for buttons, 6px for inputs\n- **Shadows**: Subtle elevation using rgba(37, 50, 74, 0.05)\n- **Borders**: 1px solid using Muted Lavender for subtle separation\n\n**Data Visualization:**\n- **Charts**: Line charts and radar charts using Dusty Teal\n- **Grid Lines**: Light Slate for subtle reference\n- **Data Points**: Sky Blue for interactive elements\n- **Trends**: Gradient from Dusty Teal to Sky Blue for positive trends\n\n## 7. UX Guide (UX 가이드)\n\n**Target User Approach**: Designed for beginners with emotional self-reflection tools\n\n**Core UX Principles:**\n1. **Guided Discovery**: Step-by-step onboarding with contextual help\n2. **Emotional Safety**: Non-judgmental language and reassuring feedback\n3. **Progressive Disclosure**: Complex features revealed as users gain comfort\n4. **Immediate Value**: Quick wins in first session to build trust\n5. **Gentle Encouragement**: Positive reinforcement without pressure\n\n**User Experience Strategy:**\n- **Onboarding**: 3-screen guided introduction with privacy explanation\n- **First Session**: Simplified recording flow with encouraging prompts\n- **Results Presentation**: Clear explanations of VAD model with tooltips\n- **Habit Formation**: Gentle reminders with streak celebrations\n- **Community**: Optional anonymous sharing with positive community guidelines\n\n**Accessibility Considerations:**\n- **Contrast**: Minimum 4.5:1 ratio for all text\n- **Touch Targets**: Minimum 44×44px for all interactive elements\n- **Screen Readers**: Semantic HTML with proper ARIA labels\n- **Keyboard Navigation**: Full keyboard accessibility for all features\n- **Captions**: Video tutorials include closed captions\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n**Buttons:**\n- **Primary**: Sky Blue background, white text, 12px padding vertical, 24px horizontal\n- **Secondary**: Transparent background, Sky Blue border and text\n- **Ghost**: Transparent background, Misty Navy text, hover with Light Slate background\n- **Destructive**: Coral background for critical actions\n- **States**: Hover (10% darker), Active (15% darker), Disabled (50% opacity)\n\n**Input Fields:**\n- **Default**: Light Slate background, Muted Lavender border, 12px padding\n- **Focus**: Sky Blue border, subtle shadow\n- **Error**: Coral border with error message below\n- **Success**: Emerald border with success indicator\n\n**Navigation:**\n- **Bottom Nav (Mobile)**: 5 items with icons and labels, active state with Sky Blue\n- **Top Nav (Desktop)**: Service logo left, user avatar right, 64px height\n- **Sidebar (Desktop)**: Dashboard sub-navigation, 240px width, collapsible\n\n**Cards:**\n- **Default**: White background, 12px border radius, subtle shadow\n- **Interactive**: Hover state with slight elevation increase\n- **Content**: 24px padding, clear hierarchy with proper spacing\n\n**Modals & Overlays:**\n- **Background**: rgba(37, 50, 74, 0.6) overlay\n- **Content**: White background, 16px border radius, 32px padding\n- **Close**: X icon in top-right corner using Muted Lavender\n\n**Progress Indicators:**\n- **Recording**: Pulsing red dot with timer\n- **Analysis**: Circular progress with percentage in Dusty Teal\n- **Streak**: Badge-style counters with Emerald background\n\n**Charts & Data Visualization:**\n- **Line Charts**: Dusty Teal lines, Sky Blue data points, Light Slate grid\n- **Radar Charts**: Dusty Teal fill with 20% opacity, solid border\n- **Trend Indicators**: Arrows using Success green (up) or Warning amber (neutral)\n\n**Feedback Components:**\n- **Success Messages**: Emerald background, white text, checkmark icon\n- **Error Messages**: Coral background, white text, alert icon\n- **Info Messages**: Sky Blue background, white text, info icon\n- **Loading States**: Skeleton screens using Light Slate with subtle animation\n\n**Typography Components:**\n- **Emotional Labels**: Medium weight, Dusty Teal color for positive emotions\n- **Data Values**: Tabular numbers for consistent alignment\n- **Timestamps**: Caption size in Muted Lavender\n- **CTAs**: Medium weight in Sky Blue for emphasis",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "ia",
      "content": "# BeMore Information Architecture (IA)\n\n## 1. Site Map\n\n```\nBeMore\n├── Landing (Public)\n│   ├── Home\n│   ├── Features\n│   ├── Privacy Policy\n│   └── Terms of Service\n├── Authentication\n│   ├── Sign Up\n│   ├── Sign In\n│   └── Password Reset\n└── Application (Protected)\n    ├── Home (Record Session)\n    │   ├── Permission Setup\n    │   ├── Recording Interface\n    │   └── Processing Status\n    ├── Dashboard\n    │   ├── Weekly Snapshot\n    │   ├── Emotion Trends\n    │   └── Habit Streaks\n    ├── Reports\n    │   ├── Report List\n    │   └── Report Detail\n    │       ├── Emotion Analysis\n    │       ├── CBT Recommendations\n    │       └── PDF Download\n    ├── Community\n    │   ├── Anonymous Feed\n    │   └── Shared Story Detail\n    ├── AI Coach\n    │   └── Chat Interface\n    └── Profile\n        ├── Account Settings\n        ├── Notification Preferences\n        ├── Privacy Controls\n        └── Data Export\n```\n\n## 2. User Flow\n\n**Primary Flow: Weekly Reflection Session**\n1. User opens BeMore app/web\n2. Navigates to Home (Record) page\n3. Grants camera/microphone permissions (first time)\n4. Starts 2-3 minute recording session\n5. Completes optional text journal entry\n6. Submits recording for analysis\n7. Waits for processing (10-15 seconds)\n8. Views emotion analysis results\n9. Reads personalized CBT recommendations\n10. Downloads PDF report or shares anonymously\n11. Accesses AI Coach for follow-up questions\n\n**Secondary Flow: Trend Review**\n1. User opens Dashboard\n2. Views weekly emotion snapshots\n3. Examines VAD trend charts over time\n4. Identifies patterns and improvements\n5. Celebrates habit streaks\n6. Sets reminders for next session\n\n**Tertiary Flow: Community Engagement**\n1. User visits Community section\n2. Browses anonymous shared experiences\n3. Reads encouraging stories from others\n4. Optionally shares own insights anonymously\n5. Finds motivation for continued reflection\n\n## 3. Navigation Structure\n\n**Mobile Navigation (Bottom Tab Bar):**\n- Home (Record) - Primary CTA for weekly sessions\n- Dashboard - Emotion trends and insights\n- Reports - Historical analysis and CBT tips\n- Community - Anonymous peer support\n- Profile - Settings and account management\n\n**Desktop Navigation:**\n- **Top Bar**: BeMore logo, Home, Dashboard, Reports, Community, User Avatar\n- **Dashboard Sidebar** (when in Dashboard):\n  - Weekly Snapshot\n  - Emotion Trends\n  - Habit Tracking\n  - Calendar View\n\n**Global Navigation Elements:**\n- Header: Service logo, main navigation, user avatar\n- Footer: Privacy policy, terms, support links (public pages only)\n\n## 4. Page Hierarchy\n\n```\n/ (Depth 1 - Public)\n├── /features (Depth 2)\n├── /privacy (Depth 2)\n└── /terms (Depth 2)\n\n/auth (Depth 1)\n├── /auth/signup (Depth 2)\n├── /auth/signin (Depth 2)\n└── /auth/reset-password (Depth 2)\n\n/app (Depth 1 - Protected)\n├── /app/home (Depth 2)\n│   ├── /app/home/permissions (Depth 3)\n│   └── /app/home/recording (Depth 3)\n├── /app/dashboard (Depth 2)\n│   ├── /app/dashboard/trends (Depth 3)\n│   └── /app/dashboard/calendar (Depth 3)\n├── /app/reports (Depth 2)\n│   └── /app/reports/:id (Depth 3)\n├── /app/community (Depth 2)\n│   └── /app/community/:postId (Depth 3)\n├── /app/coach (Depth 2)\n└── /app/profile (Depth 2)\n    ├── /app/profile/account (Depth 3)\n    ├── /app/profile/notifications (Depth 3)\n    └── /app/profile/privacy (Depth 3)\n```\n\n## 5. Content Organization\n\n| Page | Key Content Elements |\n|------|---------------------|\n| Landing Home | Hero section, value proposition, feature highlights, social proof, CTA button |\n| Sign Up | Registration form, privacy assurance, Google OAuth option, terms acceptance |\n| Home (Record) | Recording interface, permission prompts, progress indicator, session prompts |\n| Dashboard | Weekly emotion cards, VAD trend charts, habit streak counters, quick actions |\n| Report Detail | Emotion radar chart, VAD scores, CBT recommendations, PDF download, share button |\n| Community Feed | Anonymous story cards, emotion tags, encouragement reactions, post button |\n| AI Coach | Chat interface, conversation history, suggested questions, emotional context |\n| Profile | User avatar, account settings, notification toggles, privacy controls, data export |\n\n## 6. Interaction Patterns\n\n**Recording Session:**\n- Progressive disclosure: Permissions → Recording → Journal → Processing\n- Real-time feedback: Recording timer, audio level indicators\n- Encouraging prompts: Guided questions to facilitate reflection\n\n**Data Visualization:**\n- Interactive charts: Hover states show detailed emotion scores\n- Time range selection: Week, month, quarter views for trends\n- Tooltip explanations: VAD model education on demand\n\n**Community Engagement:**\n- Anonymous sharing: One-click share from report with privacy controls\n- Reaction system: Simple emoji responses for peer support\n- Content moderation: Flagging system for inappropriate content\n\n**AI Coach Integration:**\n- Contextual suggestions: Questions based on current emotion state\n- Conversation threading: Maintain context across chat sessions\n- CBT exercise delivery: Interactive guided practices\n\n## 7. URL Structure\n\n**Public Pages:**\n- `/` - Landing page\n- `/features` - Feature overview\n- `/privacy` - Privacy policy\n- `/terms` - Terms of service\n\n**Authentication:**\n- `/auth/signup` - User registration\n- `/auth/signin` - User login\n- `/auth/reset-password` - Password recovery\n\n**Application Pages:**\n- `/app/home` - Recording interface\n- `/app/dashboard` - Emotion trends overview\n- `/app/reports` - Report listing\n- `/app/reports/:reportId` - Individual report detail\n- `/app/community` - Community feed\n- `/app/community/:postId` - Shared story detail\n- `/app/coach` - AI coach chat\n- `/app/profile` - User profile and settings\n\n## 8. Component Hierarchy\n\n**Global Components:**\n- Header: Logo, navigation, user avatar\n- Footer: Links and legal information (public only)\n- BottomNavigation: Mobile tab bar for main sections\n- LoadingSpinner: Consistent loading states\n- Toast: Success/error notifications\n\n**Authentication Components:**\n- AuthForm: Reusable form container\n- SocialLogin: Google OAuth integration\n- PasswordStrength: Real-time validation\n\n**Recording Components:**\n- CameraPreview: Video recording interface\n- AudioVisualizer: Real-time audio level display\n- RecordingTimer: Session duration tracking\n- JournalInput: Optional text reflection\n\n**Dashboard Components:**\n- EmotionCard: Weekly snapshot display\n- TrendChart: VAD line chart visualization\n- StreakCounter: Habit tracking display\n- CalendarView: Historical session overview\n\n**Report Components:**\n- RadarChart: Emotion analysis visualization\n- CBTRecommendations: Personalized tip cards\n- ShareModal: Anonymous sharing interface\n- PDFExport: Report download functionality\n\n**Community Components:**\n- StoryCard: Anonymous shared experience\n- ReactionBar: Emoji-based peer support\n- PostComposer: Story sharing interface\n\n**Chat Components:**\n- MessageBubble: Chat conversation display\n- SuggestedQuestions: AI-generated prompts\n- TypingIndicator: AI response loading state\n\n**Form Components:**\n- Input: Standardized form fields\n- Button: Primary, secondary, and ghost variants\n- Toggle: Settings and preference controls\n- Select: Dropdown selections\n\n**Data Visualization:**\n- LineChart: Trend visualization\n- ProgressBar: Analysis processing states\n- EmotionLabel: Standardized emotion tags\n- ScoreDisplay: VAD numerical representations\n\nThis information architecture supports BeMore's core mission of providing accessible emotional self-awareness tools while maintaining user privacy and encouraging consistent engagement through clear navigation and intuitive content organization.",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-10-01T06:45:56.219Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-10-01T06:45:56.219Z"
    }
  ]
}